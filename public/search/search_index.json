{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"chia/chia_premine/","text":"Chia Premine Chia Premine and where it stays on Blockchain 0xdce5 2.625.000 XCH (Genesis) 0xeac9 1.312.500 XCH (Child) 0x8225 1.312.500 XCH (Child) 0x1fd6 18.375.000 XCH (Genesis) 0x4d00 9.187.500 XCH (Child) 0xd7a8 9.187.500 XCH (Child)","title":"Chia Premine"},{"location":"chia/chia_premine/#chia-premine","text":"Chia Premine and where it stays on Blockchain 0xdce5 2.625.000 XCH (Genesis) 0xeac9 1.312.500 XCH (Child) 0x8225 1.312.500 XCH (Child) 0x1fd6 18.375.000 XCH (Genesis) 0x4d00 9.187.500 XCH (Child) 0xd7a8 9.187.500 XCH (Child)","title":"Chia Premine"},{"location":"chia/chia_quickstart/","text":"Chia Quickstart \u00dcberblick Es ist ein einfacher Grundsatz beim Chia Farmen zu verfolgen. - Du brauchst tempor\u00e4r SCHNELLEN Speicher zum Plotten (NVME / SSD / Ramdisk) und CPU Power (Quad Core 3 Ghz w\u00e4r schon gut) - Du kannst alle Rechner die du tempor\u00e4r findest zum Plotten benutzen :-) -> die Plotter bekommen nur Public Keys - Du brauchst lange Zeit (Jahre) GROSSEN Speicher zum Farmen (HDD 15 TB) Die folgende Grafik zeigt, wie eine Chia Farm skaliert werden kann. Die Plotter sind tempor\u00e4r und m\u00fcssen nur laufen solange die gro\u00dfen Festplatten bef\u00fcllt werden. Wenn ein Main Node nicht reicht und zus\u00e4tzliche Festplatten nicht an einen Host angeschlossen werden k\u00f6nnen k\u00f6nnen weitere Hosts als Harvester betrieben werden. Dies hat auch den Vorteil, dass bei der Suche eines \"Proofs\" auf den Festplatten alle Harvester gleichzeitig nach dem Proof suchen k\u00f6nnen. Die Plotter brauchen Power. Der Full Node kann ein Raspberry Pi4 sein. Du willst 10 Festplatten am RPI 4 anschlie\u00dfen? Es soll billig sein? Kein Problem -> Amazon - Icy Box IB-3810U3 Chia auf der CommandLine Da alle Chia Forks gleich funktionieren, erkl\u00e4re ich das ganze anhand von Beispielen der Chia Forks die ich verwendet habe. Du wirst auf den offiziellen Projekt Seiten immer \u00e4hnliche Anleitungen finden. User verwende einen sudo Berechtigten User um Chia (oder seine Forks) zu installieren. Verwende am besten einen separaten User (NICHT sudo Berechtigt) um die Clients zu betreiben. Du hast mindestens 3 User root -> Der User den wir NICHT verwenden rudi -> der Sudo Berechtigte User der root werden darf chia -> OHNE Sudo Rechte -> dieser User betreibt die Chia Clients Wenn du GANZ auf Nummer sicher gehen willst, legst du pro Chia Fork wieder einzelne User an. Jeweils ohne Sudo Rechte: hddcoin flax flora usw Installation Die Installation stellt erst mal die Python Pakete und die Binaries bereit. Du bekommst lediglich die \"commands\" f\u00fcr die Ausf\u00fchrung. Es wird noch nichts eingerichtet oder Konfiguriert. Installation via Source Code hierf\u00fcr brauchst du kein Sudo. Du kompilierst die Binaries in deinem User Profil. Ich habe das z.B. bei HDDCoin auf meinem Raspberry gemacht, da es keine ARM64 Binaries hierf\u00fcr gibt. cd ~ mkdir hddcoin cd hddcoin git clone https://github.com/HDDcoin-Network/hddcoin-blockchain.git cd hddcoin-blockchain/ sh install.sh Bei Chia w\u00e4re das dann nat\u00fcrlich so cd ~ mkdir chia cd chia git clone https://github.com/Chia-Network/chia-blockchain.git cd chia-blockchain/ sh install.sh Das ist auch schon alles. Bei Chia ersetze hddcoin durch chia und durch die URLs des Chia Projekts. Die Einrichtung und Konfiguration des Chia Clients ist ein anderes Thema Installation via Debian Paket Flora betreibe ich auf einem x64 Prozessor. Bei Flora habe ich hier also passende Debian Pakete. Als sudo Berechtigter User machst du so etwas hier wget https://github.com/Flora-Network/flora-blockchain/releases/download/0.2.12/flora-blockchain_0.2.12_amd64.deb sudo apt install ./flora-blockchain_0.2.12_amd64.deb #Flora f\u00fcr die Command Line ist nun installiert #Aus bequemlichkeit will ich Flora direkt im Path haben #Flora finden (geht genauso mit Chia) sudo find / -name flora #Flora verlinken (chia macht das z.B. automatisch) sudo ln -s /usr/lib/flora-blockchain/resources/app.asar.unpacked/daemon/flora /usr/local/bin/flora Jetzt sollte z.b. flora Betriebsbereit sein Verwendung des Clients je nachdem wie du den Client installiert hast, musst du etwas anders machen um den Client verwenden zu k\u00f6nnen. Wenn \u00fcber Paketmanager installiert Wenn du den Client via Distributionspaket installiert hast, hast du in der Regel eine \"binary\" die du direkt ausf\u00fchren kannst (im Beispiel oben habe ich \"flora\" verlinkt) flora Wenn \u00fcber Sourcecode Installiert Wenn du den Client \u00fcber Sourcecode installiert hast. Wurde im Zielverzeichnis eine Python virtual Environment installiert. Diese musst du aktivieren um die Chia Commands zur verf\u00fcgung zu haben cd chia-blockchain . ./activate Deine Prompt ver\u00e4ndert sich. Es steht \"(venv)\" vorne dran (venv) ubuntu@cloud:~/install/chia-blockchain Nun solltest du die chia Commands zur Verf\u00fcgung haben chia -h #Hilfe Initialisierung Bei den folgenden Abschnitten gehe ich davon aus, dass du das jeweilige Chia (oder Fork) Python Environment aktiviert hast und somit das jeweilig Chia command zur Verf\u00fcgung hast. Bei der Initialisierung eines Chia Clients werden Konfigurationsdaten, Datenbanken, Keys, Zertifikate und dergleichen in ein verstecktes Verzeichnis in deinem Homeverzeichnis geschrieben. z.B. - $HOME/.chia - $HOME/.flora - $HOME/.hddcoin Die Ordnerstruktur darunter sieht immer so aus (diese wird erst bei Initialisierung geschrieben): .chia mainnet cache config # hier liegt die Konfigurationsdatei f\u00fcr deinen User ssl # Eine SelfSigned CA und Zertifikate mit denen deine Chia Komponenten kommunizieren db # hier liegt die Blockchain Database (sqlite). Um schneller starten zu k\u00f6nnen, kannst du die komplette Blockchain DB von einer vertrauensw\u00fcrdigen Quelle kopieren log # hier wird geloggt run wallet # hier liegt deine Wallet Database F\u00fchre die Initialisierung mit dem User aus, der die Chia Farm betreiben soll z.B. su - chia dann Initialisierst du deinen Client chia init Erstellen eines private Keys Das erste was du brauchst in ein private Key. Der private Key ist dein kritischster Bestandteil dieser Installation und darf nie in unbefugte H\u00e4nde geraten. Bei Erstellung des Keys bekommst du ein \"24 word mnemonic\". Mit diesem mnemonic kann der Key wiederhergestellt werden. Notiere dieses am besten zwei mal auf Papier und hebe es an zwei unterschiedlichen Orten auf. #Generieren chia keys generate #Deine 24 secret words nochmal anzeigen chia keys show --show-mnemonic-seed Oder importieren eines private Keys Hast du bereits einen private Key erstellt und willst z.B. deine Plots auch in anderen Chia Forks verwenden musst du den selben private Key in die anderen Clients importieren #Importieren mit Hilfe der 24 words chia keys add Starten des Farmers Bei starten des Farmers wird deine Wallet, dein FullNode, dein Harvester und dein Farmer gestartet. Dein Full Node beginnt damit sich mit der Blockchain zu synchronisieren. Das kann einige Tage dauern Hier bemerken wir nun einen Vorteil der Commandline gegen\u00fcber der GUI. Auf der Commandline wird ein Daemon gestartet und du kannst dich wieder aus dem System ausloggen. Startest du die GUI dann starten die Daemons automatisch mit. Allerdings werdenmit der GUI auch automatisch alle Daemons beendet. Bedeutet, einmal mit der GUI gestartet, darfst du dich nicht mehr von der GUI Abmelden. Aber nun starten wir erst mal unseren Farmer chia start farmer Du beginnst mit der Blockchain zu synchronisieren. Dein FullNode muss voll synchronisiert werden bevor du XCH Coins verdienen kannst. Du kannst aber bereits vorher schon mit dem Plotten beginnen Deinen aktuellen Status siehst du dann so chia show --state --connections z.b. Current Blockchain Status: Full Node Synced Peak: Hash: db08d075673cdf95f8a1550958ddc98b04961537fe25400471224159ddf71417 Time: Sun Nov 14 2021 08:28:13 CET Height: 1138722 Estimated network space: 35954.135 PiB Current difficulty: 3008 Current VDF sub_slot_iters: 135266304 Total iterations since the start of the blockchain: 4279546468297 Height: | Hash: 1138722 | db08d075673cdf95f8a1550958ddc98b04961537fe25400471224159ddf71417 1138721 | 828258873c67056847bd4246f171e7a96192d2bbd903a57dc1b5ca9e4f48be3b 1138720 | 2944b1fe31877b4c2050132c2ccbaa8ce0aa2ba24254513fa585ca5c540b4def 1138719 | 5de2e20f416cefc2a1643ccdf7f91ef2d409ba84b72f460e7e6b09547b0da1da Connections: Type IP Ports NodeID Last Connect MiB Up|Dwn FARMER 127.0.0.1 38916/8447 6f859972... Nov 10 09:53:17 4.1|0.0 WALLET 127.0.0.1 39034/8449 2af00103... Nov 14 08:27:42 72.5|0.2 FULL_NODE 109.136.117.75 8444/8444 1de41420... Nov 14 08:27:47 16.5|36.1 -SB Height: 1138722 -Hash: db08d075... FULL_NODE 211.72.136.88 8444/8444 2867716e... Nov 14 08:27:48 9.3|141.2 -SB Height: 1138722 -Hash: db08d075... FULL_NODE 81.100.17.198 8444/8444 4c8203c5... Nov 14 08:27:47 27.6|56.0 -SB Height: 1138722 -Hash: db08d075... Pool oder Nicht Pool in der Regel willst du einem Pool beitreten. Der Chia Netspace ist inzwischen schon so gro\u00df, dass du etliche Petabytes Speicher brauchst um eine Chance zu haben einen Plot zu gewinnen. Mit Pools kannst du Bruchteile gewinnen und verdienst so auch Chia. Um einem Pool beizutreten -> folge dem Chia Pooling Guide - https://github.com/Chia-Network/chia-blockchain/wiki/Pooling-User-Guide#how-to-start-pooling-in-6-steps Unter https://faucet.chia.net/ kannst du dir ein bisschen Mojo auf deine Wallet \u00fcberweisen lassen um ein NFT f\u00fcr das Pooling plotten zu k\u00f6nnen. Du solltest 0.000000000010 XCH vom Faucet bekommen. Alternativ kann dir auch ein Freud Mojo \u00fcberweisen. Du trittst dan einem Pool bei indem du einen Plot f\u00fcr den Pool erstellst z.b. chia plotnft create --fingerprint 116privatekeyFingerprint --pool_url https://eu1.pool.space --fee 0 .000000000001 Plotten der Files f\u00fcr Chia Bei Chia geht es darum Speicherplatz f\u00fcr das Netzwerk bereitzustellen. Das machst du in dem du eine Art \"Bingo Karten\" auf deine Festplatten Plottest. Das Plotten ist der Resourcenintensivste Teil des Chia Farmings. Du musst nur zu beginn Plotten bis der Speicherplatz deiner Festplatten mit Plots belegt ist. Diese Plots kannst du dann \u00fcber Jahre verwenden. Aktuell sind \"32k Plots\" aktuell. Es kann sein, dass mit besserer Hardware es notwendig wird z.B. \"33k Plots\" zu plotten. Das ist aber noch Zukunftsmusik Komplette Guides zum Plotten findest du hier: - Plotting Basics - Alternative Plotter (ich z.B. verwende MadMax ) - MadMax wird inzwischen in den Original Chia Client integriert. Ich verwende noch immer den von der MadMax Seite: https://github.com/madMAx43v3r/chia-plotter - Aber siehe mal chia plotters -h (in der aktuellen Version des Chia Clients) - Plot k sizes aktuell ist 32k Standard - Command Reference Ressourcen zum Plotten beim Plotten werden tempor\u00e4re Files geschrieben auf denen sehr viele IOPS generiert werden. F\u00fcr ein 110 GB Plot File weren mehrere Terrabytes an Daten geschrieben bevor das endg\u00fcltige Plotfile geschrieben werden kann. Du brauchst schnelle SSDs oder gen\u00fcgend RAM und die tempor\u00e4ren Files zu schreibnen sonst dauern ein eiziger Plot Tage. Entweder eine 512GB ausdauernde SSD / NVME z.B. https://www.seagate.com/de/de/internal-hard-drives/ssd/firecuda-ssd/ Oder 128 GB RAMDisk f\u00fcr 75% der IOPs und 350 GB RAMDisk oder SSD f\u00fcr 25% der IOPs (z.B. bei Verwendung von MadMax Plotter) Das Plotten muss nicht auf deinem Main Node stattfinden. Du kannst z.B die Farm auf einem kleinen strom sparenden Raspberry Pi4 laufen lassen w\u00e4hrend du das tempor\u00e4r aufwendige Plotting auf einer Leistungsf\u00e4higen Workstation laufen l\u00e4sst. Der Plotter ben\u00f6tigt keine private Keys . Du musst dem Plotter lediglich ein paar PUBLIC Keys mitgeben. Das bedeutet, theretisch k\u00f6nntest du das Plotten an einen externen Dienstleister Outsourcen. So wird geplottet Mein Plot Script sieht z.B. so aus (MadMax Plotter): Erst mal musst du deine Keys rausbekommen: Das hier machst du auf deinem MAIN Node. Deine Wallet und Farmer Public Keys: chia keys show Notiere deinen FarmerPublicKey Showing all private keys: Fingerprint: 116privatekeyFingerprint Master public key (m): 95a5150d3f208bdfMasterPublicKey Master private key (m): 4d4fe183a636a3MasterPrivateKey Farmer public key (m/12381/8444/0/0): a5e7f85c750d654e5fa7ae36a82ffFarmerPublicKey Pool public key (m/12381/8444/1/0): 97373c34069ca480819a6PoolbPublicKey First wallet key (m/12381/8444/2/0): aa7633ae18259477273a320f32d85FirstWalletKey First wallet address: xch14n2vdvh5yx6th9rfjk6dheazt49mFirstWalletAddress Deine Pool NFT Keys: chia plotnft show Notiere deine Pool Contract Address Wallet height: 1139037 Sync status: Synced Wallet id 2: Current state: FARMING_TO_POOL Current state from block height: 623409 Launcher ID: 9bcf0aLauncherId Target address (not for plotting): xch19PlotTarget Number of plots: 385 Owner public key: af4OwnerPK Pool contract address (use ONLY for plotting - do not send money to this address): xch1PoolContractAddress Current pool URL: https://eu1.pool.space Current difficulty: 7 Points balance: 559 Points found (24h): 3749 Percent Successful Points (24h): 99.97% Relative lock height: 64 blocks Payout instructions (pool will pay to this address): xch1PayoutInstructions Mein Script f\u00fcr das Plotting \u00fcber den Pool sieht dann z.B. so aus: wenn du \u00fcber die GUI Plotten willst, bedenke, dass f\u00fcr den gesamten Plot Vorgang die GUI ge\u00f6ffnet bleiben muss. Dieses Script kann wie bereits erw\u00e4hnt auf einem ganz anderen Rechner laufen. Du kannst auf dem anderen Rechner z.B. NUR den MadMax Plotter installieren (ohne den vollen Chia Client). Der Plotter ben\u00f6tigt keinen private Key. Lediglich die hier erw\u00e4hnten PoolContractAddress und FarmerPublicKey. Die Files die du Plottest kannst du im nachhinein auch kopieren / verschieben. Bedenke aber, dass jeder Plot einzigartig sein muss. #!/bin/bash POOL_CONTRACT_ADDRESS = xch1PoolContractAddress FARMER_PUBLIC_KEY = a5e7f85c750d654e5fa7ae36a82ffFarmerPublicKey FAST_DISK = /chiatmp/plot01/ TMP_DISK = /chiatmp/plot02/ FINAL_DISK = /mnt/chia/farm03/ LOGFILE = /var/log/chia/chia_plot.log echo \"Starting Plot \" ` date +%Y-%m-%d_%H-%M-%S ` >> $LOGFILE #Temporaere Verzeichnisse ausleeren rm $FAST_DISK * rm $TMP_DISK * rm $FAST_DISK2 * rm $TMP_DISK2 * #Ich starte den Prozess mit \"nice\" und im Hintergrund. Mit -n 100 sage ich es sollen 100 Plots in die \"FINAL_DISK\" geschrieben werden nice -n 10 chia_plot -n 100 -2 $FAST_DISK -t $TMP_DISK -d $FINAL_DISK -c $POOL_CONTRACT_ADDRESS -f $FARMER_PUBLIC_KEY 2 > & 1 >> $LOGFILE & echo $! > $PLOT_PIDFILE & Hinzuf\u00fcgen von Plots zum Farmer Wenn du auf einer anderen Maschine geplottet hast, dann machst du das folgende wieder auf deinem MAIN Node (dort wo du deinen Chia Client mit chia init initialisiert hast). Du kannst Plots aus mehreren Pfaden zu deiner Chia Farm hinzuf\u00fcgen. Nimm die Pfade die zu den *.plot Dateien f\u00fchren. chia plots add --final_dir /mnt/chia/hdd01 chia plots add --final_dir /mnt/chia/hdd02 chia plots add --final_dir /mnt/chia/hdd03 Pr\u00fcfen der Plots auf G\u00fcltigkeit Du kannst auch die G\u00fcltigkeit deiner Plots testen chia plots check","title":"Chia Quickstart"},{"location":"chia/chia_quickstart/#chia-quickstart","text":"","title":"Chia Quickstart"},{"location":"chia/chia_quickstart/#uberblick","text":"Es ist ein einfacher Grundsatz beim Chia Farmen zu verfolgen. - Du brauchst tempor\u00e4r SCHNELLEN Speicher zum Plotten (NVME / SSD / Ramdisk) und CPU Power (Quad Core 3 Ghz w\u00e4r schon gut) - Du kannst alle Rechner die du tempor\u00e4r findest zum Plotten benutzen :-) -> die Plotter bekommen nur Public Keys - Du brauchst lange Zeit (Jahre) GROSSEN Speicher zum Farmen (HDD 15 TB) Die folgende Grafik zeigt, wie eine Chia Farm skaliert werden kann. Die Plotter sind tempor\u00e4r und m\u00fcssen nur laufen solange die gro\u00dfen Festplatten bef\u00fcllt werden. Wenn ein Main Node nicht reicht und zus\u00e4tzliche Festplatten nicht an einen Host angeschlossen werden k\u00f6nnen k\u00f6nnen weitere Hosts als Harvester betrieben werden. Dies hat auch den Vorteil, dass bei der Suche eines \"Proofs\" auf den Festplatten alle Harvester gleichzeitig nach dem Proof suchen k\u00f6nnen. Die Plotter brauchen Power. Der Full Node kann ein Raspberry Pi4 sein. Du willst 10 Festplatten am RPI 4 anschlie\u00dfen? Es soll billig sein? Kein Problem -> Amazon - Icy Box IB-3810U3","title":"\u00dcberblick"},{"location":"chia/chia_quickstart/#chia-auf-der-commandline","text":"Da alle Chia Forks gleich funktionieren, erkl\u00e4re ich das ganze anhand von Beispielen der Chia Forks die ich verwendet habe. Du wirst auf den offiziellen Projekt Seiten immer \u00e4hnliche Anleitungen finden.","title":"Chia auf der CommandLine"},{"location":"chia/chia_quickstart/#user","text":"verwende einen sudo Berechtigten User um Chia (oder seine Forks) zu installieren. Verwende am besten einen separaten User (NICHT sudo Berechtigt) um die Clients zu betreiben. Du hast mindestens 3 User root -> Der User den wir NICHT verwenden rudi -> der Sudo Berechtigte User der root werden darf chia -> OHNE Sudo Rechte -> dieser User betreibt die Chia Clients Wenn du GANZ auf Nummer sicher gehen willst, legst du pro Chia Fork wieder einzelne User an. Jeweils ohne Sudo Rechte: hddcoin flax flora usw","title":"User"},{"location":"chia/chia_quickstart/#installation","text":"Die Installation stellt erst mal die Python Pakete und die Binaries bereit. Du bekommst lediglich die \"commands\" f\u00fcr die Ausf\u00fchrung. Es wird noch nichts eingerichtet oder Konfiguriert.","title":"Installation"},{"location":"chia/chia_quickstart/#installation-via-source-code","text":"hierf\u00fcr brauchst du kein Sudo. Du kompilierst die Binaries in deinem User Profil. Ich habe das z.B. bei HDDCoin auf meinem Raspberry gemacht, da es keine ARM64 Binaries hierf\u00fcr gibt. cd ~ mkdir hddcoin cd hddcoin git clone https://github.com/HDDcoin-Network/hddcoin-blockchain.git cd hddcoin-blockchain/ sh install.sh Bei Chia w\u00e4re das dann nat\u00fcrlich so cd ~ mkdir chia cd chia git clone https://github.com/Chia-Network/chia-blockchain.git cd chia-blockchain/ sh install.sh Das ist auch schon alles. Bei Chia ersetze hddcoin durch chia und durch die URLs des Chia Projekts. Die Einrichtung und Konfiguration des Chia Clients ist ein anderes Thema","title":"Installation via Source Code"},{"location":"chia/chia_quickstart/#installation-via-debian-paket","text":"Flora betreibe ich auf einem x64 Prozessor. Bei Flora habe ich hier also passende Debian Pakete. Als sudo Berechtigter User machst du so etwas hier wget https://github.com/Flora-Network/flora-blockchain/releases/download/0.2.12/flora-blockchain_0.2.12_amd64.deb sudo apt install ./flora-blockchain_0.2.12_amd64.deb #Flora f\u00fcr die Command Line ist nun installiert #Aus bequemlichkeit will ich Flora direkt im Path haben #Flora finden (geht genauso mit Chia) sudo find / -name flora #Flora verlinken (chia macht das z.B. automatisch) sudo ln -s /usr/lib/flora-blockchain/resources/app.asar.unpacked/daemon/flora /usr/local/bin/flora Jetzt sollte z.b. flora Betriebsbereit sein","title":"Installation via Debian Paket"},{"location":"chia/chia_quickstart/#verwendung-des-clients","text":"je nachdem wie du den Client installiert hast, musst du etwas anders machen um den Client verwenden zu k\u00f6nnen.","title":"Verwendung des Clients"},{"location":"chia/chia_quickstart/#wenn-uber-paketmanager-installiert","text":"Wenn du den Client via Distributionspaket installiert hast, hast du in der Regel eine \"binary\" die du direkt ausf\u00fchren kannst (im Beispiel oben habe ich \"flora\" verlinkt) flora","title":"Wenn \u00fcber Paketmanager installiert"},{"location":"chia/chia_quickstart/#wenn-uber-sourcecode-installiert","text":"Wenn du den Client \u00fcber Sourcecode installiert hast. Wurde im Zielverzeichnis eine Python virtual Environment installiert. Diese musst du aktivieren um die Chia Commands zur verf\u00fcgung zu haben cd chia-blockchain . ./activate Deine Prompt ver\u00e4ndert sich. Es steht \"(venv)\" vorne dran (venv) ubuntu@cloud:~/install/chia-blockchain Nun solltest du die chia Commands zur Verf\u00fcgung haben chia -h #Hilfe","title":"Wenn \u00fcber Sourcecode Installiert"},{"location":"chia/chia_quickstart/#initialisierung","text":"Bei den folgenden Abschnitten gehe ich davon aus, dass du das jeweilige Chia (oder Fork) Python Environment aktiviert hast und somit das jeweilig Chia command zur Verf\u00fcgung hast. Bei der Initialisierung eines Chia Clients werden Konfigurationsdaten, Datenbanken, Keys, Zertifikate und dergleichen in ein verstecktes Verzeichnis in deinem Homeverzeichnis geschrieben. z.B. - $HOME/.chia - $HOME/.flora - $HOME/.hddcoin Die Ordnerstruktur darunter sieht immer so aus (diese wird erst bei Initialisierung geschrieben): .chia mainnet cache config # hier liegt die Konfigurationsdatei f\u00fcr deinen User ssl # Eine SelfSigned CA und Zertifikate mit denen deine Chia Komponenten kommunizieren db # hier liegt die Blockchain Database (sqlite). Um schneller starten zu k\u00f6nnen, kannst du die komplette Blockchain DB von einer vertrauensw\u00fcrdigen Quelle kopieren log # hier wird geloggt run wallet # hier liegt deine Wallet Database F\u00fchre die Initialisierung mit dem User aus, der die Chia Farm betreiben soll z.B. su - chia dann Initialisierst du deinen Client chia init","title":"Initialisierung"},{"location":"chia/chia_quickstart/#erstellen-eines-private-keys","text":"Das erste was du brauchst in ein private Key. Der private Key ist dein kritischster Bestandteil dieser Installation und darf nie in unbefugte H\u00e4nde geraten. Bei Erstellung des Keys bekommst du ein \"24 word mnemonic\". Mit diesem mnemonic kann der Key wiederhergestellt werden. Notiere dieses am besten zwei mal auf Papier und hebe es an zwei unterschiedlichen Orten auf. #Generieren chia keys generate #Deine 24 secret words nochmal anzeigen chia keys show --show-mnemonic-seed","title":"Erstellen eines private Keys"},{"location":"chia/chia_quickstart/#oder-importieren-eines-private-keys","text":"Hast du bereits einen private Key erstellt und willst z.B. deine Plots auch in anderen Chia Forks verwenden musst du den selben private Key in die anderen Clients importieren #Importieren mit Hilfe der 24 words chia keys add","title":"Oder importieren eines private Keys"},{"location":"chia/chia_quickstart/#starten-des-farmers","text":"Bei starten des Farmers wird deine Wallet, dein FullNode, dein Harvester und dein Farmer gestartet. Dein Full Node beginnt damit sich mit der Blockchain zu synchronisieren. Das kann einige Tage dauern Hier bemerken wir nun einen Vorteil der Commandline gegen\u00fcber der GUI. Auf der Commandline wird ein Daemon gestartet und du kannst dich wieder aus dem System ausloggen. Startest du die GUI dann starten die Daemons automatisch mit. Allerdings werdenmit der GUI auch automatisch alle Daemons beendet. Bedeutet, einmal mit der GUI gestartet, darfst du dich nicht mehr von der GUI Abmelden. Aber nun starten wir erst mal unseren Farmer chia start farmer Du beginnst mit der Blockchain zu synchronisieren. Dein FullNode muss voll synchronisiert werden bevor du XCH Coins verdienen kannst. Du kannst aber bereits vorher schon mit dem Plotten beginnen Deinen aktuellen Status siehst du dann so chia show --state --connections z.b. Current Blockchain Status: Full Node Synced Peak: Hash: db08d075673cdf95f8a1550958ddc98b04961537fe25400471224159ddf71417 Time: Sun Nov 14 2021 08:28:13 CET Height: 1138722 Estimated network space: 35954.135 PiB Current difficulty: 3008 Current VDF sub_slot_iters: 135266304 Total iterations since the start of the blockchain: 4279546468297 Height: | Hash: 1138722 | db08d075673cdf95f8a1550958ddc98b04961537fe25400471224159ddf71417 1138721 | 828258873c67056847bd4246f171e7a96192d2bbd903a57dc1b5ca9e4f48be3b 1138720 | 2944b1fe31877b4c2050132c2ccbaa8ce0aa2ba24254513fa585ca5c540b4def 1138719 | 5de2e20f416cefc2a1643ccdf7f91ef2d409ba84b72f460e7e6b09547b0da1da Connections: Type IP Ports NodeID Last Connect MiB Up|Dwn FARMER 127.0.0.1 38916/8447 6f859972... Nov 10 09:53:17 4.1|0.0 WALLET 127.0.0.1 39034/8449 2af00103... Nov 14 08:27:42 72.5|0.2 FULL_NODE 109.136.117.75 8444/8444 1de41420... Nov 14 08:27:47 16.5|36.1 -SB Height: 1138722 -Hash: db08d075... FULL_NODE 211.72.136.88 8444/8444 2867716e... Nov 14 08:27:48 9.3|141.2 -SB Height: 1138722 -Hash: db08d075... FULL_NODE 81.100.17.198 8444/8444 4c8203c5... Nov 14 08:27:47 27.6|56.0 -SB Height: 1138722 -Hash: db08d075...","title":"Starten des Farmers"},{"location":"chia/chia_quickstart/#pool-oder-nicht-pool","text":"in der Regel willst du einem Pool beitreten. Der Chia Netspace ist inzwischen schon so gro\u00df, dass du etliche Petabytes Speicher brauchst um eine Chance zu haben einen Plot zu gewinnen. Mit Pools kannst du Bruchteile gewinnen und verdienst so auch Chia. Um einem Pool beizutreten -> folge dem Chia Pooling Guide - https://github.com/Chia-Network/chia-blockchain/wiki/Pooling-User-Guide#how-to-start-pooling-in-6-steps Unter https://faucet.chia.net/ kannst du dir ein bisschen Mojo auf deine Wallet \u00fcberweisen lassen um ein NFT f\u00fcr das Pooling plotten zu k\u00f6nnen. Du solltest 0.000000000010 XCH vom Faucet bekommen. Alternativ kann dir auch ein Freud Mojo \u00fcberweisen. Du trittst dan einem Pool bei indem du einen Plot f\u00fcr den Pool erstellst z.b. chia plotnft create --fingerprint 116privatekeyFingerprint --pool_url https://eu1.pool.space --fee 0 .000000000001","title":"Pool oder Nicht Pool"},{"location":"chia/chia_quickstart/#plotten-der-files-fur-chia","text":"Bei Chia geht es darum Speicherplatz f\u00fcr das Netzwerk bereitzustellen. Das machst du in dem du eine Art \"Bingo Karten\" auf deine Festplatten Plottest. Das Plotten ist der Resourcenintensivste Teil des Chia Farmings. Du musst nur zu beginn Plotten bis der Speicherplatz deiner Festplatten mit Plots belegt ist. Diese Plots kannst du dann \u00fcber Jahre verwenden. Aktuell sind \"32k Plots\" aktuell. Es kann sein, dass mit besserer Hardware es notwendig wird z.B. \"33k Plots\" zu plotten. Das ist aber noch Zukunftsmusik Komplette Guides zum Plotten findest du hier: - Plotting Basics - Alternative Plotter (ich z.B. verwende MadMax ) - MadMax wird inzwischen in den Original Chia Client integriert. Ich verwende noch immer den von der MadMax Seite: https://github.com/madMAx43v3r/chia-plotter - Aber siehe mal chia plotters -h (in der aktuellen Version des Chia Clients) - Plot k sizes aktuell ist 32k Standard - Command Reference","title":"Plotten der Files f\u00fcr Chia"},{"location":"chia/chia_quickstart/#ressourcen-zum-plotten","text":"beim Plotten werden tempor\u00e4re Files geschrieben auf denen sehr viele IOPS generiert werden. F\u00fcr ein 110 GB Plot File weren mehrere Terrabytes an Daten geschrieben bevor das endg\u00fcltige Plotfile geschrieben werden kann. Du brauchst schnelle SSDs oder gen\u00fcgend RAM und die tempor\u00e4ren Files zu schreibnen sonst dauern ein eiziger Plot Tage. Entweder eine 512GB ausdauernde SSD / NVME z.B. https://www.seagate.com/de/de/internal-hard-drives/ssd/firecuda-ssd/ Oder 128 GB RAMDisk f\u00fcr 75% der IOPs und 350 GB RAMDisk oder SSD f\u00fcr 25% der IOPs (z.B. bei Verwendung von MadMax Plotter) Das Plotten muss nicht auf deinem Main Node stattfinden. Du kannst z.B die Farm auf einem kleinen strom sparenden Raspberry Pi4 laufen lassen w\u00e4hrend du das tempor\u00e4r aufwendige Plotting auf einer Leistungsf\u00e4higen Workstation laufen l\u00e4sst. Der Plotter ben\u00f6tigt keine private Keys . Du musst dem Plotter lediglich ein paar PUBLIC Keys mitgeben. Das bedeutet, theretisch k\u00f6nntest du das Plotten an einen externen Dienstleister Outsourcen.","title":"Ressourcen zum Plotten"},{"location":"chia/chia_quickstart/#so-wird-geplottet","text":"Mein Plot Script sieht z.B. so aus (MadMax Plotter): Erst mal musst du deine Keys rausbekommen: Das hier machst du auf deinem MAIN Node. Deine Wallet und Farmer Public Keys: chia keys show Notiere deinen FarmerPublicKey Showing all private keys: Fingerprint: 116privatekeyFingerprint Master public key (m): 95a5150d3f208bdfMasterPublicKey Master private key (m): 4d4fe183a636a3MasterPrivateKey Farmer public key (m/12381/8444/0/0): a5e7f85c750d654e5fa7ae36a82ffFarmerPublicKey Pool public key (m/12381/8444/1/0): 97373c34069ca480819a6PoolbPublicKey First wallet key (m/12381/8444/2/0): aa7633ae18259477273a320f32d85FirstWalletKey First wallet address: xch14n2vdvh5yx6th9rfjk6dheazt49mFirstWalletAddress Deine Pool NFT Keys: chia plotnft show Notiere deine Pool Contract Address Wallet height: 1139037 Sync status: Synced Wallet id 2: Current state: FARMING_TO_POOL Current state from block height: 623409 Launcher ID: 9bcf0aLauncherId Target address (not for plotting): xch19PlotTarget Number of plots: 385 Owner public key: af4OwnerPK Pool contract address (use ONLY for plotting - do not send money to this address): xch1PoolContractAddress Current pool URL: https://eu1.pool.space Current difficulty: 7 Points balance: 559 Points found (24h): 3749 Percent Successful Points (24h): 99.97% Relative lock height: 64 blocks Payout instructions (pool will pay to this address): xch1PayoutInstructions Mein Script f\u00fcr das Plotting \u00fcber den Pool sieht dann z.B. so aus: wenn du \u00fcber die GUI Plotten willst, bedenke, dass f\u00fcr den gesamten Plot Vorgang die GUI ge\u00f6ffnet bleiben muss. Dieses Script kann wie bereits erw\u00e4hnt auf einem ganz anderen Rechner laufen. Du kannst auf dem anderen Rechner z.B. NUR den MadMax Plotter installieren (ohne den vollen Chia Client). Der Plotter ben\u00f6tigt keinen private Key. Lediglich die hier erw\u00e4hnten PoolContractAddress und FarmerPublicKey. Die Files die du Plottest kannst du im nachhinein auch kopieren / verschieben. Bedenke aber, dass jeder Plot einzigartig sein muss. #!/bin/bash POOL_CONTRACT_ADDRESS = xch1PoolContractAddress FARMER_PUBLIC_KEY = a5e7f85c750d654e5fa7ae36a82ffFarmerPublicKey FAST_DISK = /chiatmp/plot01/ TMP_DISK = /chiatmp/plot02/ FINAL_DISK = /mnt/chia/farm03/ LOGFILE = /var/log/chia/chia_plot.log echo \"Starting Plot \" ` date +%Y-%m-%d_%H-%M-%S ` >> $LOGFILE #Temporaere Verzeichnisse ausleeren rm $FAST_DISK * rm $TMP_DISK * rm $FAST_DISK2 * rm $TMP_DISK2 * #Ich starte den Prozess mit \"nice\" und im Hintergrund. Mit -n 100 sage ich es sollen 100 Plots in die \"FINAL_DISK\" geschrieben werden nice -n 10 chia_plot -n 100 -2 $FAST_DISK -t $TMP_DISK -d $FINAL_DISK -c $POOL_CONTRACT_ADDRESS -f $FARMER_PUBLIC_KEY 2 > & 1 >> $LOGFILE & echo $! > $PLOT_PIDFILE &","title":"So wird geplottet"},{"location":"chia/chia_quickstart/#hinzufugen-von-plots-zum-farmer","text":"Wenn du auf einer anderen Maschine geplottet hast, dann machst du das folgende wieder auf deinem MAIN Node (dort wo du deinen Chia Client mit chia init initialisiert hast). Du kannst Plots aus mehreren Pfaden zu deiner Chia Farm hinzuf\u00fcgen. Nimm die Pfade die zu den *.plot Dateien f\u00fchren. chia plots add --final_dir /mnt/chia/hdd01 chia plots add --final_dir /mnt/chia/hdd02 chia plots add --final_dir /mnt/chia/hdd03","title":"Hinzuf\u00fcgen von Plots zum Farmer"},{"location":"chia/chia_quickstart/#prufen-der-plots-auf-gultigkeit","text":"Du kannst auch die G\u00fcltigkeit deiner Plots testen chia plots check","title":"Pr\u00fcfen der Plots auf G\u00fcltigkeit"},{"location":"ethereum/zksync_layer2/","text":"ZKSync als Layer2 L\u00f6sung f\u00fcr Storj Ethereum Mit ZKSync Lassen sich Transaction Fees auf Ehtereum dramatisch reduzieren. https://wallet.zksync.io/ Ich brauche das um meinen Storj Node rentabel zu machen Storj Node Dokumentation Start zkSync Swap Es gibt genau einen zkSync Swap auf dem ich meine Storj Token gegen etwas anderes tauschen kann. ZigZag Exchange f\u00fcr zkSync zkSync to Centralised Exchange Und es gibt genau einen Exchange auf dem ich meine Storj Token zu Geld machen kann. ByBit unterst\u00fctzt zkSync 21.04.2022 : Und Stand heute ist auf ByBit zkSync offline \ud83e\udd23. ABER: auf ZigZag kann ich STORJ f\u00fcr ETH Swappen und dann auf Orbiter ETH vom zkSync Netzwerk nach Polygon schicken. ETH kann ich dann vom Polygon Netzwerk aus zum Crypto.com Exchange einzahlen. Easy Peasy... : flowchart LR subgraph zksync[\"zkSync L2 Netzwerk\"] subgraph padding01[ ] zksync_wallet[\"ZKSync\\nWallet 0xd9a6\"] --STORJ--> zigzag[\"ZigZag\\nSwap\"] --ETH--> zksync_wallet --ETH--> orbiter[\"Orbiter\\nBridge\"] end end orbiter --ETH--> polygon_wallet subgraph polygon[\"Polygon Netzwerk\"] subgraph padding02[ ] polygon_wallet[\"ZKSync\\nWallet 0xd9a6\"] end end polygon_wallet --ETH--> cryptocom_wallet subgraph cryptocom[\"Crypto.com\"] subgraph padding03[ ] cryptocom_wallet[\"Crypto.com\\nETH Wallet\\n(Polygon) 0xea3b\"] cryptocom_wallet --ETH--> cryptocom_exchange cryptocom_exchange --USDT--> cryptocom_wallet cryptocom_wallet --USDT--> cryptocom_creditcard cryptocom_exchange[\"Crypto.com\\nExchange\"] cryptocom_creditcard[\"Crypto.com\\nKreditkarte\"] end end classDef padding fill:none,stroke:none class padding01,padding02,padding03 padding","title":"ZKSync als Layer2 L\u00f6sung f\u00fcr Storj Ethereum"},{"location":"ethereum/zksync_layer2/#zksync-als-layer2-losung-fur-storj-ethereum","text":"Mit ZKSync Lassen sich Transaction Fees auf Ehtereum dramatisch reduzieren. https://wallet.zksync.io/ Ich brauche das um meinen Storj Node rentabel zu machen Storj Node Dokumentation Start","title":"ZKSync als Layer2 L\u00f6sung f\u00fcr Storj Ethereum"},{"location":"ethereum/zksync_layer2/#zksync-swap","text":"Es gibt genau einen zkSync Swap auf dem ich meine Storj Token gegen etwas anderes tauschen kann. ZigZag Exchange f\u00fcr zkSync","title":"zkSync Swap"},{"location":"ethereum/zksync_layer2/#zksync-to-centralised-exchange","text":"Und es gibt genau einen Exchange auf dem ich meine Storj Token zu Geld machen kann. ByBit unterst\u00fctzt zkSync 21.04.2022 : Und Stand heute ist auf ByBit zkSync offline \ud83e\udd23. ABER: auf ZigZag kann ich STORJ f\u00fcr ETH Swappen und dann auf Orbiter ETH vom zkSync Netzwerk nach Polygon schicken. ETH kann ich dann vom Polygon Netzwerk aus zum Crypto.com Exchange einzahlen. Easy Peasy... : flowchart LR subgraph zksync[\"zkSync L2 Netzwerk\"] subgraph padding01[ ] zksync_wallet[\"ZKSync\\nWallet 0xd9a6\"] --STORJ--> zigzag[\"ZigZag\\nSwap\"] --ETH--> zksync_wallet --ETH--> orbiter[\"Orbiter\\nBridge\"] end end orbiter --ETH--> polygon_wallet subgraph polygon[\"Polygon Netzwerk\"] subgraph padding02[ ] polygon_wallet[\"ZKSync\\nWallet 0xd9a6\"] end end polygon_wallet --ETH--> cryptocom_wallet subgraph cryptocom[\"Crypto.com\"] subgraph padding03[ ] cryptocom_wallet[\"Crypto.com\\nETH Wallet\\n(Polygon) 0xea3b\"] cryptocom_wallet --ETH--> cryptocom_exchange cryptocom_exchange --USDT--> cryptocom_wallet cryptocom_wallet --USDT--> cryptocom_creditcard cryptocom_exchange[\"Crypto.com\\nExchange\"] cryptocom_creditcard[\"Crypto.com\\nKreditkarte\"] end end classDef padding fill:none,stroke:none class padding01,padding02,padding03 padding","title":"zkSync to Centralised Exchange"},{"location":"ledger/ledger_howto/","text":"Ledger Hardware Wallet HowTo Notfall Wiederherstellung mit Software Wallet Das folgende sind Notfall Prozeduren f\u00fcr Worst Case Szenarien. Z.B. - dein Ledger wurde geklaut, du musst deine Coins in Sicherheit bringen bevor der Dieb den PIN des Ledgers knacken kann. Du hast keinen zweiten Ledger zur Hand - Dein alter Ledger ist defekt. Es gibt keinen neuen Ledger zu kaufen oder du willst auf einen anderen Hersteller umsteigen Auch wenn du deinen Ledger nicht mehr hast. Dein Backup Seed und die richtige Software sollten alles sein was du brauchst. Wenn du mit einer Notfall Methode wieder Zugriff auf deine Coins erlangt hast solltest du deine Coins sofort auf eine andere sichere Wallet \u00fcberweisen Ledger arbeitet mit standartisierten Seed Passphrases daher ist eine Wiederherstellung der Accounts Hersteller\u00fcbergreifend auf anderen Hardware- als auch Software Wallets m\u00f6glich. Ledger - EXPORT YOUR ACCOUNTS Technischer Hintergrund Wenn eine Wallet erstellt wird wird eine zuf\u00e4llige \"Mnemonic Phrase\" erstellt. Das sind 12 oder 24 W\u00f6rter aus denen alle weiteren private Keys generiert werden. Ledger verwendet einen Seed nach \"BIP39\" Standard. - BIP39 Seed Standard BIP39 scheint nicht perfekt zu sein weswegen sich im Falle von Bitcoin die Entwickler der \"Electrum\" Wallet f\u00fcr einen eigenen Standard entschieden haben - Electrum Seed Version System Auszug aus der Electrum Doku BIP39 was introduced two years after Electrum. BIP39 seeds include a checksum, in order to help users figure out typing errors. However, BIP39 suffers the same shortcomings as early Electrum seed phrases: A fixed wordlist is still required. Following our recommendation, BIP39 authors decided to derive keys and addresses in a way that does not depend on the wordlist. However, BIP39 still requires the wordlist in order to compute its checksum, which is plainly inconsistent, and defeats the purpose of our recommendation. This problem is exacerbated by the fact that BIP39 proposes to create one wordlist per language. This threatens the portability of BIP39 seed phrases. BIP39 seed phrases do not include a version number. This means that software should always know how to generate keys and addresses. BIP43 suggests that wallet software will try various existing derivation schemes within the BIP32 framework. This is extremely inefficient and rests on the assumption that future wallets will support all previously accepted derivation methods. If, in the future, a wallet developer decides not to implement a particular derivation method because it is deprecated, then the software will not be able to detect that the corresponding seed phrases are not supported, and it will return an empty wallet instead. This threatens users funds. Ledger arbeitet jedenfalls nach dem BIP39 Standard. Keys werden aus dem initialen Key erstellt. Das einzige was zuf\u00e4llig ist, ist der initiale Seed Seed (BIP39) Ledger Apps Bitcoin App Bitcoin privKey 1 Bitcoin privKey 2 Ethereum App (auch f\u00fcr EVM kompatible Chains) Ethereum (oder Cronos) privKey 1 Ethereum (oder andere EVM kompatible) privKey2 Notfall Wiederherstellung wenn kein Hardware Ledger zur Hand Die folgenden Dinge habe ich mit einem tempor\u00e4ren Seed ausprobiert. Auf diesen Seed wurden keine Coins transferriert. Der Seed wird gel\u00f6scht und das verwendete Ledger wird auf Werkseinstellungen zur\u00fcckgesetzt Bitcoin Ein beliebtes OpenSource Wallet f\u00fcr Bitcoin ist Electrum . Electrum enth\u00e4lt die notwendige Software damit du mit deinem Seed wieder auf deine Bitcoins zugreifen kannst F\u00fcr Bitcoin Adressen gibt es verschiedene Adress Standard die man unterscheiden muss - legacy (p2pkh) - Segwit (p2sh-segwit) oder (p2wpkh-p2sh) - Native Segwit (p2wpkh) Standardm\u00e4\u00dfig generiert Ledger Live native segwit Adresen Ob das stimmt was ich gemacht habe \u00fcberpr\u00fcfe ich indem ich pr\u00fcfe ob die gleichen Adressen generiert werden. Ledger Live Bitcoin bc1qan88lzyxvh2kghncsq9kpnwxcl69hgc3axtzk9 Ledger Live kann scheinbar keine zweite Adresse generieren. Der Native Segwit Standard w\u00fcrde das aber hergeben Electrum Bitcoin bc1qan88lzyxvh2kghncsq9kpnwxcl69hgc3axtzk9 bc1qkskqt6ngjefwqfexpwkm7jmpemaxk5z4u7p2lz Electrum kann zur Verschleierung von Transaktionen mehrere public Adressen generieren. Die erste Adresse stimmt \u00fcberein. Also alles gut! Wenn Electrum nun auch noch Ledger als Hardware nutzen k\u00f6nnte dann w\u00e4r das noch besser. Aber das ist eine andere Geschichte. Ethereum und EVM kompatible Chains Ethereum ist wegen seiner Programmierbarkeit mit SmartContracts DER Wahnsinn f\u00fcr DeFi (Decentralized Finance geworden). Es gibt dutzende Chains die alle auf der Ethereum virtual Machine aufbauen und alle mit den gleichen Keys kompatibel sind Die Top 10 der gr\u00f6\u00dften EVM Chains laut DefiLlama Ethereum (ETH) - ERC20 Binance Smart Chain (BNB) - BEP20 Avalanche (AVAX) Fantom (FTM) Polygon (MATIC) Cronos (CRO) Arbitrum Klaytn (KLAY) Aurora (AURORA) Harmony (ONE) Alle diese Chains k\u00f6nnen theoretisch mit einem einzigen Ehtereum private Key bespa\u00dft werden. Metamask macht es vor. Wenn man sich mit Metamask mit einer anderen EVM Chain verbindet wird der aktuell vorhandene private Key einfach weiterverwendet. In Metamask kann der Seed von Ledger einfach als \"24 Word Phrase\" importiert werden Ledger Live Ethereum 0x0eDAE1b5feD047e2716cF96A665aDc36e0cD9B5D Metamask 0x0eDAE1b5feD047e2716cF96A665aDc36e0cD9B5D Auch wieder alles gut. Diese Adresse ist dann f\u00fcr alle EVM kompatiblen Chains g\u00fcltig (siehe oben)","title":"Ledger Hardware Wallet HowTo"},{"location":"ledger/ledger_howto/#ledger-hardware-wallet-howto","text":"","title":"Ledger Hardware Wallet HowTo"},{"location":"ledger/ledger_howto/#notfall-wiederherstellung-mit-software-wallet","text":"Das folgende sind Notfall Prozeduren f\u00fcr Worst Case Szenarien. Z.B. - dein Ledger wurde geklaut, du musst deine Coins in Sicherheit bringen bevor der Dieb den PIN des Ledgers knacken kann. Du hast keinen zweiten Ledger zur Hand - Dein alter Ledger ist defekt. Es gibt keinen neuen Ledger zu kaufen oder du willst auf einen anderen Hersteller umsteigen Auch wenn du deinen Ledger nicht mehr hast. Dein Backup Seed und die richtige Software sollten alles sein was du brauchst. Wenn du mit einer Notfall Methode wieder Zugriff auf deine Coins erlangt hast solltest du deine Coins sofort auf eine andere sichere Wallet \u00fcberweisen Ledger arbeitet mit standartisierten Seed Passphrases daher ist eine Wiederherstellung der Accounts Hersteller\u00fcbergreifend auf anderen Hardware- als auch Software Wallets m\u00f6glich. Ledger - EXPORT YOUR ACCOUNTS","title":"Notfall Wiederherstellung mit Software Wallet"},{"location":"ledger/ledger_howto/#technischer-hintergrund","text":"Wenn eine Wallet erstellt wird wird eine zuf\u00e4llige \"Mnemonic Phrase\" erstellt. Das sind 12 oder 24 W\u00f6rter aus denen alle weiteren private Keys generiert werden. Ledger verwendet einen Seed nach \"BIP39\" Standard. - BIP39 Seed Standard BIP39 scheint nicht perfekt zu sein weswegen sich im Falle von Bitcoin die Entwickler der \"Electrum\" Wallet f\u00fcr einen eigenen Standard entschieden haben - Electrum Seed Version System Auszug aus der Electrum Doku BIP39 was introduced two years after Electrum. BIP39 seeds include a checksum, in order to help users figure out typing errors. However, BIP39 suffers the same shortcomings as early Electrum seed phrases: A fixed wordlist is still required. Following our recommendation, BIP39 authors decided to derive keys and addresses in a way that does not depend on the wordlist. However, BIP39 still requires the wordlist in order to compute its checksum, which is plainly inconsistent, and defeats the purpose of our recommendation. This problem is exacerbated by the fact that BIP39 proposes to create one wordlist per language. This threatens the portability of BIP39 seed phrases. BIP39 seed phrases do not include a version number. This means that software should always know how to generate keys and addresses. BIP43 suggests that wallet software will try various existing derivation schemes within the BIP32 framework. This is extremely inefficient and rests on the assumption that future wallets will support all previously accepted derivation methods. If, in the future, a wallet developer decides not to implement a particular derivation method because it is deprecated, then the software will not be able to detect that the corresponding seed phrases are not supported, and it will return an empty wallet instead. This threatens users funds. Ledger arbeitet jedenfalls nach dem BIP39 Standard. Keys werden aus dem initialen Key erstellt. Das einzige was zuf\u00e4llig ist, ist der initiale Seed Seed (BIP39) Ledger Apps Bitcoin App Bitcoin privKey 1 Bitcoin privKey 2 Ethereum App (auch f\u00fcr EVM kompatible Chains) Ethereum (oder Cronos) privKey 1 Ethereum (oder andere EVM kompatible) privKey2","title":"Technischer Hintergrund"},{"location":"ledger/ledger_howto/#notfall-wiederherstellung-wenn-kein-hardware-ledger-zur-hand","text":"Die folgenden Dinge habe ich mit einem tempor\u00e4ren Seed ausprobiert. Auf diesen Seed wurden keine Coins transferriert. Der Seed wird gel\u00f6scht und das verwendete Ledger wird auf Werkseinstellungen zur\u00fcckgesetzt","title":"Notfall Wiederherstellung wenn kein Hardware Ledger zur Hand"},{"location":"ledger/ledger_howto/#bitcoin","text":"Ein beliebtes OpenSource Wallet f\u00fcr Bitcoin ist Electrum . Electrum enth\u00e4lt die notwendige Software damit du mit deinem Seed wieder auf deine Bitcoins zugreifen kannst F\u00fcr Bitcoin Adressen gibt es verschiedene Adress Standard die man unterscheiden muss - legacy (p2pkh) - Segwit (p2sh-segwit) oder (p2wpkh-p2sh) - Native Segwit (p2wpkh) Standardm\u00e4\u00dfig generiert Ledger Live native segwit Adresen Ob das stimmt was ich gemacht habe \u00fcberpr\u00fcfe ich indem ich pr\u00fcfe ob die gleichen Adressen generiert werden. Ledger Live Bitcoin bc1qan88lzyxvh2kghncsq9kpnwxcl69hgc3axtzk9 Ledger Live kann scheinbar keine zweite Adresse generieren. Der Native Segwit Standard w\u00fcrde das aber hergeben Electrum Bitcoin bc1qan88lzyxvh2kghncsq9kpnwxcl69hgc3axtzk9 bc1qkskqt6ngjefwqfexpwkm7jmpemaxk5z4u7p2lz Electrum kann zur Verschleierung von Transaktionen mehrere public Adressen generieren. Die erste Adresse stimmt \u00fcberein. Also alles gut! Wenn Electrum nun auch noch Ledger als Hardware nutzen k\u00f6nnte dann w\u00e4r das noch besser. Aber das ist eine andere Geschichte.","title":"Bitcoin"},{"location":"ledger/ledger_howto/#ethereum-und-evm-kompatible-chains","text":"Ethereum ist wegen seiner Programmierbarkeit mit SmartContracts DER Wahnsinn f\u00fcr DeFi (Decentralized Finance geworden). Es gibt dutzende Chains die alle auf der Ethereum virtual Machine aufbauen und alle mit den gleichen Keys kompatibel sind Die Top 10 der gr\u00f6\u00dften EVM Chains laut DefiLlama Ethereum (ETH) - ERC20 Binance Smart Chain (BNB) - BEP20 Avalanche (AVAX) Fantom (FTM) Polygon (MATIC) Cronos (CRO) Arbitrum Klaytn (KLAY) Aurora (AURORA) Harmony (ONE) Alle diese Chains k\u00f6nnen theoretisch mit einem einzigen Ehtereum private Key bespa\u00dft werden. Metamask macht es vor. Wenn man sich mit Metamask mit einer anderen EVM Chain verbindet wird der aktuell vorhandene private Key einfach weiterverwendet. In Metamask kann der Seed von Ledger einfach als \"24 Word Phrase\" importiert werden Ledger Live Ethereum 0x0eDAE1b5feD047e2716cF96A665aDc36e0cD9B5D Metamask 0x0eDAE1b5feD047e2716cF96A665aDc36e0cD9B5D Auch wieder alles gut. Diese Adresse ist dann f\u00fcr alle EVM kompatiblen Chains g\u00fcltig (siehe oben)","title":"Ethereum und EVM kompatible Chains"},{"location":"spacemesh/","text":"Spacemesh Devnet TweedleDev 207 - Spacemesh 0.2 Preview Devnet Devnet Join https://product.spacemesh.io/#/join_devnet Wallet $ account info Local alias: Default Address: 0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2 Balance: 0 Smidge Nonce: 0 Projected balance: 0 Smidge Projected nonce: 0 Projected state includes all pending transactions that haven't been added to the mesh yet Public key: 0xcf616a9ae833662ec081066cc5c4c27a63aee36bff650f633626f5760babf6f2 Private key: 0x925b1f46c3a5d887cd04108f72acae765c4ee83d2634482d5322b794562115decf616a9ae833662ec081066cc5c4c27a63aee36bff650f633626f5760babf6f2 Smeshing Setup $ Enter an address for smesher rewards: 0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2 $ Enter proof of spacetime data directory (relative to node or absolute): post_data $ Enter number of units. (0.000001 GiB per unit. Min units: 2, Max units: 4): 4 Available proof of spacetime compute providers: Id 1 - NVIDIA GeForce GTX 1650 (CUDA) Id 2 - CPU (CPU) $ Enter proof of spacetime compute provider id number: 1 Proof of spacetime setup configuration summary Data directory (relative to node or absolute): post_data Size (GiB): 3.8146973e-06 Size (Bytes): 4096 Units: 4 Labels: 4096 Bits per label: 8 Labels per unit: 1024 Compute provider id: 1 Data files: 1 \ud83d\udc50 Proof of spacetime setup has started and your node will start smeshing when it is complete. \u26a0\ufe0f IMPORTANT: Please update the smeshing section of your node's config file with the following so your node will smesh after you restart it. { \"smeshing\" : { \"smeshing-start\" : true , \"smeshing-coinbase\" : \"0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2\" , \"smeshing-opts\" : { \"smeshing-opts-datadir\" : \"post_data\" , \"smeshing-opts-numunits\" : 4 , \"smeshing-opts-numfiles\" : 1 , \"smeshing-opts-provider\" : 1 , \"smeshing-opts-throttle\" : true } } }","title":"Spacemesh"},{"location":"spacemesh/#spacemesh","text":"","title":"Spacemesh"},{"location":"spacemesh/#devnet","text":"","title":"Devnet"},{"location":"spacemesh/#tweedledev-207-spacemesh-02-preview-devnet","text":"Devnet Join https://product.spacemesh.io/#/join_devnet","title":"TweedleDev 207 - Spacemesh 0.2 Preview Devnet"},{"location":"spacemesh/#wallet","text":"$ account info Local alias: Default Address: 0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2 Balance: 0 Smidge Nonce: 0 Projected balance: 0 Smidge Projected nonce: 0 Projected state includes all pending transactions that haven't been added to the mesh yet Public key: 0xcf616a9ae833662ec081066cc5c4c27a63aee36bff650f633626f5760babf6f2 Private key: 0x925b1f46c3a5d887cd04108f72acae765c4ee83d2634482d5322b794562115decf616a9ae833662ec081066cc5c4c27a63aee36bff650f633626f5760babf6f2","title":"Wallet"},{"location":"spacemesh/#smeshing-setup","text":"$ Enter an address for smesher rewards: 0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2 $ Enter proof of spacetime data directory (relative to node or absolute): post_data $ Enter number of units. (0.000001 GiB per unit. Min units: 2, Max units: 4): 4 Available proof of spacetime compute providers: Id 1 - NVIDIA GeForce GTX 1650 (CUDA) Id 2 - CPU (CPU) $ Enter proof of spacetime compute provider id number: 1 Proof of spacetime setup configuration summary Data directory (relative to node or absolute): post_data Size (GiB): 3.8146973e-06 Size (Bytes): 4096 Units: 4 Labels: 4096 Bits per label: 8 Labels per unit: 1024 Compute provider id: 1 Data files: 1 \ud83d\udc50 Proof of spacetime setup has started and your node will start smeshing when it is complete. \u26a0\ufe0f IMPORTANT: Please update the smeshing section of your node's config file with the following so your node will smesh after you restart it. { \"smeshing\" : { \"smeshing-start\" : true , \"smeshing-coinbase\" : \"0xC5C4c27a63AeE36bFf650f633626f5760BaBF6F2\" , \"smeshing-opts\" : { \"smeshing-opts-datadir\" : \"post_data\" , \"smeshing-opts-numunits\" : 4 , \"smeshing-opts-numfiles\" : 1 , \"smeshing-opts-provider\" : 1 , \"smeshing-opts-throttle\" : true } } }","title":"Smeshing Setup"},{"location":"weltwirtschaft/anchor_crash_und_bitcoin/","text":"Als info f\u00fcr euch was gestern passiert ist. Es gab \u00fcbers Wochenende und gester einen Koordinierten Angriff auf \"Anchor Protocol\", \"Terra (LUNA)\", und UST (US Dollar Terra) Mit Anchor ist das hier passiert Anchor ist das gr\u00f6\u00dfte DeFi Protokoll im Terra / LUNA Ecosystem. Hier wurden gestern 10 Milliarden Dollar vernichtet ca 7 Milliarden Dollar in UST wurden liquidiert Terra hatte 80.394 BTC als \"Reserve\" f\u00fcr ihren StableCoin UST gekauft damit dieser seine Stabilitit\u00e4t auf 1$ halten kann https://decrypt.co/99567/luna-foundation-guard-buys-another-1-5b-bitcoin-back-terra-stablecoin Beim Angriff wurde der Stablecoin UST gestern massiv runtergedr\u00fcckt auf bis zu 0,61$ (der Coin sollte eigentlich immer 1\\$ kosten) Das f\u00fchrte gleichzeitig zu einer massiven Liquidierung von BTC (weil Terra diese ja als Sicherheit f\u00fcr UST hinterlegt hat). Somit haben sich ein paar gro\u00dfe Wale (oder einer?) viele billige BTC abgestaubt. Justin Sun (Tron networks) (TRX) meinte am Sonntag, dass er UST kaufen w\u00fcrde wahrscheinlich nur um \"Short\" zu gehen also beim Angriff auf UST mitzumachen und UST aus dem Markt zu dr\u00e4ngen. Wahrscheinlich hat er sich gleichzeitig um einige tausend Bitcoin bereichert. Seit gestern Abend wechseln pl\u00f6tzlich viele Bitcoin den Besitzer. diese gr\u00f6\u00dfer werdenden Balken oben in der Mitte sind das \"Volumen\". Gr\u00fcn gesch\u00e4tztes Kaufvolumen Rot gesch\u00e4tztes Verkaufsvolumen alle gro\u00dfen Krypto Unternehmen werden ganz genau den 4 JahresZyklus von Bitcoin kennen. Ganz einfach gesagt 3 Jahre rauf - 1 Jahr runter. Wir befinden uns jetzt (wie ich schon so oft gesagt habe mitten in einem roten Jahr. Ok ich befasse mich jetzt erst seit einem Jahr mit dem Zeug -> also alles nur nach bestem Wissen und Gewissen und Anlageberatung darf ich sowieso nicht machen Aber ich vermute die gro\u00dfen machen folgendes. W\u00e4hrend des b\u00e4rischen (roten) Jahres schlachten sie sich gegenseitig ab. Wer gen\u00fcgend vorgesorgt hat wird \u00fcberleben, wer nicht der verschwindet vom Markt. Bitcoin ist die h\u00e4rteste W\u00e4hrung die diese Leute kennen. Davon wird es exakt 21 Millionen geben und keinen einzigen mehr ( https://www.btc-echo.de/news/bitcoin-warum-wird-es-nie-mehr-als-21-millionen-btc-geben-102393/ ) w\u00e4hrend \"B\u00e4renm\u00e4rkten\" kann man \"billige Bitcoin\" abstauben. Und das kann man noch besser wenn man seine Gegner manipuliert und denen ihre Bitcoin abluchsen kann Wenn keiner die Bitcoin verkauft, kann man sie ja nicht billger kaufen. Nun hat Bitcoin gegen\u00fcber all diesen anderen (Proof of Stake) Coins eine Besonderheit. Es ist Proof of Work (wie \u00fcbrigens Ehtereum auch (noch). Es wird tats\u00e4chlich \"produziert\" wie ein Rohstoff. Und in der USA wird Bitcoin als Rohstoff anerkannt - https://www.blocktrainer.de/lummis-informationen-krypto-gesetz/ Der Rohstoff Bitcoin wird von den Minern produziert. N\u00e4mlich indem Energie Mithilfe von Rechnern (in diesem Fall ASICs) in Bitcoin umgewandelt wird. Dadurch entstehen Fixkosten (f\u00fcr die Ger\u00e4te) und variable Kosten (f\u00fcr die Elektrizit\u00e4t). Die Kosten der Miner lassen sich errechnen, da die Allgemeine \"Hashrate\" (die Rechenleistung) des Bitcoin Netzwerkes \u00fcberwacht werden kann. Jemand hat sich die m\u00fche gemacht und daf\u00fcr einen Indikator f\u00fcr TradingView programmiert Und sowas aber auch. F\u00e4llt der Bitcoin Preis unter die Gesamtkosten, dann bleibt Bitcoin da nicht lange. F\u00e4llt Bitcoin unter die FIXKosten. Gibt kein Miner der Welt mehr seine Bitcoins her (vermute ich mal) der Preis steigt wieder bis die Kosten gedeckt werden Die obere Linie des roten Bereiches sind die \"Bitcoin Produktion Gesamtkosten\" die untere Linie des roten Bereiches sind die \"Fixkosten\" und jetzt scroll ich mal so weit raus wie ich hier kann Und die Hashrate (Rechenleistung, Bitcoin variable Kosten). Macht gerade sowas hier.... Apropos Bitcoin Verbot in China..... Chia (XCH) Farmer Verteilung auf der Welt.... Chia (XCH) (Proof of Space and Time) erf\u00fcllt die gleichen Anforderungen an einen Rohstoff wie Bitcoin (Proof of Work). Nur versteht das der Gro\u00dfteil der Welt noch nicht. Vielleicht in 10 Jahren... aber ca 200.000 Leute verstehen das schon Bei Bitcoin ist der \"Rohstoff\" die Permamente Aufrechterhaltung einer Energieversorung des Netzwerks und damit der Hashrate. Bei Chia ist der haupts\u00e4chliche \"Rohstoff\" der Speicherplatz der \u00fcber einen bestimmten Zeitraum zur Verf\u00fcgung gestellt wird (wie ein Grundst\u00fcck das du verpachtest). Deswegen Bitcoin \"Miner\" (schuftet und arbeitet im Bergwerk / Mining). und Chia \"Farmer\" (verwendet seinen Platz (Storage / Speicherplatz) um seinen Rohstoff anzubauen (Plotten) und dann zu Ernten (Harvesting). Dass Nixxon 1971 den Goldstandard aufgehoben hatte wusste ich bereits. Aber nicht WARUM? Wegen dem Vietnamkrieg und die USA sich finanziell \u00fcbernommen hatte. DARUM https://www.welt.de/finanzen/article13546275/Vor-40-Jahren-begann-die-Aera-des-Gelddruckens.html","title":"Anchor crash und bitcoin"}]}